#!/bin/bash

# Most of the below utilites depends on the "jq" tool for parsing the 
# See https://stedolan.github.io/jq/ for installing jq tool.
# JSON reponse from GitHub rest API. Below environment variables need to
# be configured for the tool to function.
# GITHUB_API_URL - GitHub REST api URL 
# TOKEN_DEV_OPS - GitHub token of main DevOps account
# TOKEN_DEV_OPS_1 - GitHub token of subordinate DevOps account-1
# TOKEN_DEV_OPS_2 - GitHub token of subordinate DevOps account-2
# DEFAULT_GITHUB_API_DELAY - Default value for applying delay between subsequence githup api calls.


safe_merge() {
	local project_name source_branch target_branch source_helper_branch target_helper_branch files_diff ts te
	ts=`date +%s`
	project_name=$1
	source_branch=$2
	target_branch=$3
	
	echo "Checking $source_branch -> $target_branch in $project_name"
	files_diff=`gh_get_changed_files_count $project_name $source_branch $target_branch`
	if [[ files_diff -eq 0 ]]; then
		echo "Nothing to merge. Skipping $source_branch -> $target_branch in $project_name"
		return
	fi

	echo "Merging $source_branch -> $target_branch in $project_name"

	source_helper_branch="temp/smh-$source_branch-$ts"
	target_helper_branch="temp/tmh-$target_branch-$ts"

	echo "Create helper branches $source_helper_branch and $target_helper_branch in $project_name"
	
	create_branch $project_name $source_helper_branch $source_branch
	create_branch $project_name $target_helper_branch $target_branch

	direct_merge $project_name $source_helper_branch $target_helper_branch &&
		direct_merge $project_name $target_helper_branch $target_branch

	te=`date +%s`
	echo "Time taken for merging $source_branch -> $target_branch in $project_name = $((te-ts)) s"
}

direct_merge() {
	local project_name source_branch target_branch pr_url is_pb
	project_name=$1
	source_branch=$2
	target_branch=$3

	echo "Merging $source_branch to $target_branch in $project_name"

	pr_url=`create_pr $project_name $source_branch $target_branch "[DevOps] Auto PR for merging $source_branch to $target_branch"`
	if is_protected_branch $project_name $target_branch; then
		is_pb="true"
	else
		is_pb="false"
	fi
	approve_and_merge_pr $pr_url $is_pb
}

approve_and_merge_pr() {
	local web_pr_url pr_url is_pb merge_method
	pr_url=$1
	is_pb=$2
	merge_method="${3:-merge}"
	web_pr_url=`get_web_pr_url $pr_url`

	echo "Processing PR = $pr_url and is_protected = $is_pb and merge_method = $merge_method"

	if has_merge_conflicts $pr_url; then
		echo "PR has conflicts: $web_pr_url"
		echo $web_pr_url >> conflicts_to_review
		return 1
	fi

	echo "No merge conflicts for the PR: $web_pr_url"

	[[ $is_pb == "true" ]] && echo "need to approve" && approve_pr $pr_url
	
	if exec_inc_delay 5 30 merge_pr $pr_url $merge_method; then
		echo "Successfully merged $web_pr_url"
	else
		echo "Unable to merge the PR: $web_pr_url. Please check logs."
		echo $web_pr_url >> conflicts_to_review
		return 1
	fi
}


create_branch() {
	local project_name branch_name parent_branch url parent_sha
	project_name=$1
	branch_name=$2
	parent_branch=$3

	echo "Create $branch_name from $parent_branch in $project_name"

	parent_sha=`get_branch_sha $project_name $parent_branch`
	url="$GITHUB_API_URL/$project_name/git/refs"

	call_github -u $url -m POST -p  "{\"ref\": \"refs/heads/$branch_name\", \"sha\": \"$parent_sha\"}" > /dev/null
}


get_branch_sha() {
	local project_name branch_name url
	project_name=$1
	branch_name=$2
	url="$GITHUB_API_URL/$project_name/git/ref/heads/$branch_name"
	call_github -u $url | jq -r '.object.sha'
}


create_pr() {
	local project_name source target title
	project_name=$1
	source=$2
	target=$3
	title=$4
	call_github -u "$GITHUB_API_URL/$project_name/pulls" -m POST \
		-p "{\"title\": \"$title\", \"body\": \"$title\", \"head\": \"$source\", \"base\": \"$target\"}" | jq -r '.url'
}

has_merge_conflicts() {
	local pr_url m_state;
	pr_url=$1
	m_state=`call_github -u $pr_url | jq -r '.mergeable_state'`
	[[ $m_state == "dirty" ]]
}

is_protected_branch() {
	local url project_name branch_name result
	project_name=$1
	branch_name=$2
	url="$GITHUB_API_URL/$project_name/branches/$branch_name"
	result=`call_github -u $url | jq -r '.protected'`
	[[ $result == "true" ]]
}

approve_pr() {
	local pr_url status_url pr_approve_payload status_approve_payload
	pr_url=$1
	
	pr_approve_payload="{\"body\": \"Auto approved by DevOps.\", \"event\": \"APPROVE\"}"
	status_approve_payload="{\"state\": \"success\", \"context\": \"jenkinsci/pr-merge\", \"description\": \"Auto approved by DevOps.\"}"

	echo "Approving the PR = `get_web_pr_url $pr_url`"
	
	call_github -u "$pr_url/reviews" -p "$pr_approve_payload" -m POST  -a $TOKEN_DEV_OPS_1 > /dev/null
	call_github -u "$pr_url/reviews" -p "$pr_approve_payload" -m POST  -a $TOKEN_DEV_OPS_2 > /dev/null

	status_url=`call_github -u $pr_url  | jq -r '._links.statuses.href'`
	call_github -u $status_url -p "$status_approve_payload" -m POST > /dev/null
}

merge_pr() {
	local pr_url response_code merge_method payload
	pr_url=$1
	merge_method="${2:-merge}"
	echo "Merging the PR = `get_web_pr_url $pr_url`  ($merge_method)"
	payload="{\"merge_method\": \"$merge_method\"}"
	response_code=`call_github -u "$pr_url/merge" -m PUT -f '-s -i' -p "$payload" | awk 'NR==1{print $2}'`
	if [[ $response_code == "200" ]]; then
		true
	else
		echo "Merging $pr_url - response code = $response_code"
		false
	fi
}


exec_inc_delay() {
	local retry delay method args inc result
	retry=$1;shift
	delay=$1;shift
	method=$1;shift
	args="$@"

	inc=$delay
	result=false
	while : ; do
		if $method $args; then
			result=true
			break
		fi
		retry=$(($retry-1))
		
		if [[ $retry -lt 0 ]]; then
			break
		fi
		echo "waiting for $delay s..."
		sleep $delay
		delay=$(($delay+$inc))
	done
	$result
}

add_pr_labels() {
	local project_name pr_number labels payload L a b url
	project_name=$1;shift
	pr_number=$1;shift
	labels="$@"

	echo "Labels = $labels"
	url="$GITHUB_API_URL/$project_name/issues/$pr_number/labels"
	for L in $labels; do a="$a \"$L\""; done
	
	echo "a = $a"

	b=`echo $a | sed 's/\ /,/g'`
	
	echo "b = $b"

	payload="{\"labels\": ["$b"]}"


	echo "payload = $payload"

	call_github -u $url -p "$payload" -m POST | jq  -r '.[].name'
}


get_pr_labels() {
	local project_name pr_number url
	project_name=$1
	pr_number=$2
	url="$GITHUB_API_URL/$project_name/issues/$pr_number/labels"
	call_github -u $url | jq -r '.[].name'
}

gh_get_changed_files_count() {
	local project_name source target url
	project_name=$1
	source=$2
	target=$3
	url="$GITHUB_API_URL/$project_name/compare/$target...$source"
	call_github -u $url | jq -r '.files | length'	
}

get_web_pr_url() {
	echo $1 | sed 's/api\.//' | sed 's/repos\///' | sed 's/pulls/pull/'
}

get_pr_url() {
	local project_name pr_number web_pr_url c OPTIND OPTARG
	while getopts 'p:n:u:h' c
	do
		case $c in
			p) project_name=$OPTARG ;;
			n) pr_number=$OPTARG ;;
			u) web_pr_url=$OPTARG ;;
			h) echo "Usage: get_pr_url [ -u web_pr_url ] [ -p project_name  -n pr_number ]"; return
		esac
	done
	
	if [[ -z "$web_pr_url" ]] && [[ -z "$project_name" || -z "$pr_number" ]]; then
		get_pr_url -h
		return
	fi
	
	if ! [ -z "$web_pr_url" ]; then
		project_name=`echo $web_pr_url | cut -d\/ -f5`
		pr_number=`echo $web_pr_url | cut -d\/ -f7`
	fi
	
	echo "$GITHUB_API_URL/$project_name/pulls/$pr_number"
}


gh_add_pr_reviewers() {
	local project_name pr_number reviewers payload R a b url
	project_name=$1;shift
	pr_number=$1;shift
	reviewers="$@"
	url="$GITHUB_API_URL/$project_name/pulls/$pr_number/requested_reviewers"
	for R in $reviewers; do a="$a \"$R\""; done
	b=`echo $a | sed 's/\ /,/g'`
	payload="{\"reviewers\": ["$b"]}"

	echo "payload = $payload"

	call_github -u $url -p "$payload" -m POST #| jq -r '.requested_reviewers[].login'
}

gh_get_pr_participants() {
	local project_name pr_number url pr_participants pr_json_data commenters additional_urls
	project_name=$1
	pr_number=$2
	url="$GITHUB_API_URL/$project_name/pulls/$pr_number"
	pr_json_data=`call_github -u $url`
	pr_participants=`echo "$pr_json_data" | jq -r '.user.login,.requested_reviewers[].login,.assignees[].login'`
	
	additional_urls=`echo "$pr_json_data" | jq -r '._links.review_comments.href,._links.comments.href'`
	additional_urls=`echo "$additional_urls";echo "$url/reviews"`
	for url in `echo "$additional_urls"`; do
		commenters=`call_github -u $url | jq -r '.[].user.login'`
		if ! [[ -z $commenters || $commenters == null ]]; then
			pr_participants=`echo "$pr_participants";echo "$commenters"`
		fi
	done
	echo "$pr_participants" | sort | uniq
}

gh_search_branches() {
	local project_name search_key url
	project_name=$1
	search_key=$2
	url="$GITHUB_API_URL/$project_name/git/matching-refs/heads/$search_key"
	call_github -u $url | jq -r '.[].ref' | cut -d'/' -f3-
}

gh_delete_branch() {
	local project_name branch_name url
	project_name=$1
	branch_name=$2
	url="$GITHUB_API_URL/$project_name/git/refs/heads/$branch_name"
	call_github -m DELETE -u $url
}

gh_extract_pr_details_from_webhook_payload() {
	local x_github_event json_payload actor pr_number message comment review_state
	x_github_event=$1
	json_payload=$2

	repo_name=`echo "$json_payload" | jq -r '.repository.name'`
	actor=`echo "$json_payload" | jq -r '.sender.login'`
	case $x_github_event in
		issue_comment)
			pr_number=`echo "$json_payload" | jq -r '.issue.number'`
			comment=`echo "$json_payload" | jq -r '.comment.body'`
			message="$actor commented that, $comment"
			;;
		
		pull_request_review)
			pr_number=`echo "$json_payload" | jq -r '.pull_request.number'`
			review_state=`echo "$json_payload" | jq -r '.review.state' | tr '_' ' '`
			message="PR Review $review_state by $actor"
			;;
		
		pull_request)
			gh_extract_pr_message_from_webhook_payload_pull_request "$json_payload"
			return
			;;
		
		*) echo "$x_github_event is not supported!"
			return
			;;
	esac

	echo "$(jq -n \
		--arg prn "$pr_number" \
		--arg rn "$repo_name" \
		--arg msg "$message" \
		'{pr_number: $prn, repo_name: $rn, message: $msg}')"
}

gh_extract_pr_message_from_webhook_payload_pull_request() {
	local json_payload pr_number action actor message is_merged
	json_payload=$1
	
	repo_name=`echo "$json_payload" | jq -r '.repository.name'`
	pr_number=`echo "$json_payload" | jq -r '.pull_request.number'`
	action=`echo "$json_payload" | jq -r '.action'`
	actor=`echo "$json_payload" | jq -r '.sender.login'`

	case $action in
		review_requested)
			reviewer=`echo "$json_payload" | jq -r '.requested_reviewer.login'`
			message="$reviewer's review requested for this PR by $actor"
			;;
		assigned)
			assignee=`echo "$json_payload" | jq -r '.assignee.login'`
			message="$assignee assigned for this PR by $actor"
			;;
		opened|reopened|synchronize) 
			message="PR has been updated by $actor. Kindly check if any action required from you. Thanks."
			;;
		closed)
			is_merged=`echo "$json_payload" | jq -r '.pull_request.merged'`
			if [[ $is_merged == "true" ]]; then
				message="PR has been merged by $actor"
			else
				message="PR has been closed by $actor"
			fi
			;;
		*) 
			a=`echo $action | tr '_' ' '`
			message="PR $a by $actor"
			;;
	esac

	echo "$(jq -n \
		--arg prn "$pr_number" \
		--arg rn "$repo_name" \
		--arg msg "$message" \
		'{pr_number: $prn, repo_name: $rn, message: $msg}')"
}

gh_compare_branches() {
	local project source target url
	project=$1
	source=$2
	target=$3
	url=`get_web_pr_url "$GITHUB_API_URL/$project/compare/$source...$target"`
	open_url "$url"
}

gh_get_commit_date() {
	local project_nme commit_sha url
	project_name=$1
	commit_sha=$2
	url="$GITHUB_API_URL/$project_name/commits/$commit_sha"
	call_github -u $url | jq -r '.commit.author.date' 
}

gh_get_all_branches_in_open_prs() {
	local project_name url
	project_name=$1
	url="$GITHUB_API_URL/$project_name/pulls"
	call_github -u $url | jq -r '.[].head.ref, .[].base.ref' | sort | uniq
}


call_github() {
	local url method payload delay flags auth_token c OPTIND OPTARG

	while getopts 'u:m:p:d:f:a:h' c
	do
		case $c in
			u) url=$OPTARG ;;
			m) method=$OPTARG ;;
			p) payload=$OPTARG ;;
			d) delay=$OPTARG ;;
			f) flags=$OPTARG ;;
			a) auth_token=$OPTARG ;;
			h) echo "Usage: call_github -u url [ -m method ] [ -p payload ] [ -d delay ] [ -f flags ] [ -a auth_token ]"; return 
		esac
	done

	if [ -z $delay ]; then 
		delay=${DEFAULT_GITHUB_API_DELAY-10}
	fi

	if [ -z $method ]; then
		method='GET'
	fi

	if [ -z "$flags" ]; then
		flags="-s"
	fi

	if [ -z $auth_token ]; then
		auth_token="$TOKEN_DEV_OPS"
	fi

	sleep $delay

	if [ -z "$payload" ]; then
		curl $flags -X $method -H "Authorization: token $auth_token" -H "Content-Type: application/json" "$url" 
	else
		curl $flags -X $method -H "Authorization: token $auth_token" -H "Content-Type: application/json" "$url" -d "$payload"
	fi
}






